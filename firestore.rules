rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow public read on games and tournaments for the dashboard
    match /games/{gameId} {
      allow read: if true;
      allow write: if request.auth != null; // Only authenticated users can write
    }

    match /tournaments/{tournamentId} {
      allow read: if true;
      allow write: if request.auth != null; // Only authenticated users can write
    }

    // Users can only read their own profile, but public read for basic info is often needed.
    // For simplicity, we allow reading all profiles but only let users write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Notifications might be personal or public. This allows public reads.
    match /notifications/{notificationId} {
        allow read: if true;
        allow write: if request.auth != null; // Ideally check for admin role
    }

    // Global site settings should be readable by everyone.
    match /settings/{settingId} {
        allow read: if true;
        allow write: if request.auth != null; // Ideally check for admin role
    }

    // Sponsorship requests can be created by any authenticated user,
    // but can only be read/updated/deleted by admins.
    match /sponsorships/{sponsorshipId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null; // Should be restricted to admin role in a real app
    }
    
    // Lock down teams & chats to members only
    match /teams/{teamId} {
        // Only members of the team can read team data.
        allow read: if request.auth != null && resource.data.memberUids.hasAny([request.auth.uid]);
        // Only the leader can update (add/remove members), creator can create.
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.auth.uid == resource.data.leaderUid;
        // Leader can delete
        allow delete: if request.auth != null && request.auth.uid == resource.data.leaderUid;
    }

    match /chats/{chatId}/{message=**} {
        // Users can only read/write to chats they are part of.
        // The chatID is a composite of two sorted user UIDs: 'uid1_uid2'
        allow read, write, delete: if request.auth != null && request.auth.uid in chatId.split('_');
    }
  }
}
